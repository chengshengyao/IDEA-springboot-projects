<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjpowernode.springboot.dao.TStudentDao">


    <!--
    如果数据库中的字段名称由多个单词构成，通过逆向工程生成的对象属性名称
    按照驼峰命名法命名
    其中：数据库中字段名由多个单词构成时，必须使用下划线进行分隔

    -->

    <!--
        id 标签只能修改主键字段
        result 标签 除主键外的字段
        column 属性 数据库中的字段名称
        property 属性 映射对象的属性名称
        jdbcType 列中数据库中的字段类型（可以省略不写）
    -->
    <!--
    resultMap 作用
    1.当数据库中字段与实体类对象的属性名不一致时，进行转换
    2.当前查询的结果没有对象的一个表时，可以自定义一个结果集
    -->
    <resultMap type="com.bjpowernode.springboot.entity.TStudent" id="TStudentMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="age" column="age" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="TStudentMap">
        select id,
               name,
               age
        from springboot.t_student
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="TStudentMap">
        select id,
               name,
               age
        from springboot.t_student limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="TStudentMap">
        select
        id, name, age
        from springboot.t_student
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
            <if test="age != null">
                and age = #{age}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into springboot.t_student(name, age)
        values (#{name}, #{age})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into springboot.t_student(name, age)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.name}, #{entity.age})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into springboot.t_student(name, age)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.name}, #{entity.age})
        </foreach>
        on duplicate key update
        name = values(name) , age = values(age)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update springboot.t_student
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from springboot.t_student
        where id = #{id}
    </delete>

</mapper>

